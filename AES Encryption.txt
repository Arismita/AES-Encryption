//AES 128 bit encryption implementation
//to be compiled with -lm extension, i.e. gcc aes.c -lm

#include <stdio.h>
#include <string.h>
#include <math.h>

int key[4][4],pt[4][4],tmpkey[4][4],ct[4][4];

//KEY GEN: substitution box for key generation
int key_sbox[16][16]=
{
{4,77,100,22,85,87,15,23,95,18,75,54,37,50,84,77},
{82,57,63,55,1,63,73,54,29,38,75,53,100,2,99,77},
{30,55,43,4,74,53,15,49,69,61,54,82,84,72,44,53},
{5,66,94,3,90,75,92,100,98,47,50,9,53,25,46,39},
{26,1,17,74,62,36,18,60,95,45,95,5,62,28,44,78},
{2,65,82,41,31,58,78,89,84,53,35,2,86,57,65,82},
{27,90,24,7,37,13,91,65,31,3,19,93,31,42,19,88},
{15,6,14,55,15,34,72,24,9,27,4,3,50,17,74,34},
{56,6,94,52,88,60,40,24,56,95,16,52,28,57,65,15},
{72,55,47,92,59,63,99,47,76,85,91,17,32,55,52,43},
{45,14,27,44,98,67,81,81,67,10,89,41,93,84,17,8},
{98,26,66,3,20,87,47,41,67,34,62,90,90,79,84,62},
{97,66,51,59,19,20,66,100,51,23,12,35,75,14,53,91},
{49,100,32,9,99,32,64,19,39,73,9,6,85,70,12,67},
{14,68,32,27,23,88,94,64,27,55,8,25,79,71,44,73},
{84,97,43,30,22,70,71,99,59,66,48,50,40,53,1,89}
};

//ENCODE:
int encode_sbox[16][16]=
{
{52,78,28,26,26,24,67,74,70,6,7,41,85,55,25,7},
{48,54,70,94,52,15,80,67,48,51,14,64,41,49,32,94},
{62,57,33,28,81,88,7,19,36,66,30,98,41,50,89,43},
{69,96,84,87,25,45,76,47,9,77,18,68,38,38,61,83},
{18,21,41,54,44,99,15,44,77,65,74,84,16,50,7,17},
{46,90,63,86,84,13,73,33,70,1,29,60,58,13,80,22},
{43,29,55,48,57,77,27,76,88,87,48,61,35,92,80,9},
{87,57,89,58,46,25,84,37,17,11,94,30,55,66,57,2},
{87,95,5,42,74,7,96,31,50,99,27,39,80,100,60,16},
{84,36,20,88,82,34,99,57,88,100,74,45,19,41,27,57},
{10,12,59,99,1,38,37,90,45,73,26,27,99,94,75,40},
{56,59,7,55,34,72,63,76,29,21,79,64,63,6,56,63},
{56,17,88,89,2,91,5,71,14,37,20,37,20,21,95,86},
{59,54,38,13,25,5,73,68,58,43,12,23,73,55,70,58},
{64,89,14,90,55,37,91,40,61,2,64,99,84,78,74,38},
{64,86,58,65,97,66,13,82,32,14,47,49,12,54,55,21}
};

//ENCODE:
int refmatrix[4][4]=
{
{2,3,1,1},
{1,2,3,1},
{1,1,2,3},
{3,1,1,2}
};

//KEY GEN: round constant for key generation
int rcon[4]={35,24,36,92};

//KEY GEN: function to take the key input
void keyinp()
{
         char k[20]; int p,cnt=0;
         printf("\n enter the key (preferably 16 places long): ");
         scanf("%[^\n]%*c", k); 
         p= strlen(k);
         
         if(p< 16)
           for(int i=p; i<16;i++)
              k[i]=k[i-p];
           
          for(int i=0;i<4;i++)
              for(int j=0;j<4;j++)
                key[i][j]= k[cnt++];         
}

//KEY GEN: coloumn rotation for key generation
void colrot ()
{
         tmpkey[0][0]=key[1][3];
         tmpkey[1][0]=key[2][3];
         tmpkey[2][0]=key[3][3];
         tmpkey[3][0]=key[0][3];
}


//KEY GEN: sbox substitution (lookup) for key generation
void key_subs()
{
         int b,c,i;
         for(i=0;i<4;i++)
          {
             b=tmpkey[i][0]>>4;
             c=tmpkey[i][0]&15;
             tmpkey[i][0]= key_sbox[b][c];
          }
}

//KEY GEN: function for xor for the (4i+1)th columns of the keys
void xor_3col()
{
         int i;
         for( i=0;i<4;i++)
            tmpkey[i][0]=tmpkey[i][0]^key[i][0]^rcon[i];
}

//KEY GEN: function for xor for the columns other than (4i+1)th column of the keys
void xor_2col()
{
         int i,j;
         for( i=1;i<4;i++)
           for(j=0;j<4;j++)
            tmpkey[j][i]=key[j][i]^tmpkey[j][0];
}

//KEY GEN: function to generate the round keys
void generate_key()
{
          colrot();
         key_subs();
         xor_3col();
         xor_2col();
          for(int i=0;i<4;i++)
              for(int j=0;j<4;j++)
                key[i][j]= tmpkey[i][j];
}

//ENCODE: xor the pt and initial key
void xor_pt()
{
         int i,j;
         for( i=0;i<4;i++)
           for(j=0;j<4;j++)
             ct[i][j]=key[i][j]^pt[i][j];
}

//ENCODE: sbox substituition of modified pt
void pt_substituition()
{
         int b,c,i,j;
         for(i=0;i<4;i++)
            for(int j=0; j<4; j++)
                 {
                    b=ct[i][j]>>4;
                    c=ct[i][j]&15;
                    ct[i][j]= encode_sbox[b][c];
                 }  
}

//ENCODE: shift the rows of modified pt
void  pt_shiftrows()
{
         int temp[4][4];
         for(int i=0; i<4; i++)
           for(int j=0; j<4; j++)
               temp[i][j]= ct[i][(j+i)%4]; 
             
         for(int i=0; i<4; i++)
            for(int j=0; j<4; j++)
                ct[i][j]=temp[i][j];
}

//ENCODE: MIX COLUMN: binary to decimal conversion

int bin_to_dec(int *a)
{
         int i,num=0;
         for(i=0; i<14; i++)
           if(a[i]==1)
             {
              int mul= pow(2,i);
              num= num+ mul ;
             }
         return num;
}

//ENCODE: MIX COLUMN: decimal to binary conversion

int* dec_to_bin(int n, int *a)// int b)
{
        int i, b[8]; 
        for(i=0;i<8;i++)
          {
              a[i]= 0;
              b[i]=0;
          }  
        for(i=0;n>0;i++)    
         {    
           a[i]=n%2;    
           n=n/2;    
         }
        for(i=7; i>=0; i--)
           b[8-i-1]=a[i];
           
        for(i=0; i<8; i++)
           a[i]=b[i];
        return a;
}

//ENCODE: MIX COLUMN: galoi's field multiplication of 2 integers 

int* galois_mul(int no1, int no2, int *temp_arr)
{
           int p[8],q[8], *no1_arr, *no2_arr, i,j,k;
           int ref[]={1,0,0,0,1,1,0,1,1};
           no1_arr= dec_to_bin(no1,p); 
           no2_arr= dec_to_bin(no2,q); 
  
         for(i=0; i<14; i++)
           temp_arr[i]=0;
         
         for(i=0; i<8; i++)
           for(j=0; j<8; j++)
             if(no1_arr[i]==1 && no2_arr[j]==1)
               temp_arr[i+j]++;
               
         for(i=0; i<14; i++)
           if(temp_arr[i] % 2 == 0)
               temp_arr[i]=0;
           else
               temp_arr[i]=1;
               
         for(i=13; i>8; i--)
            if(temp_arr[i]==1)
              for(j=i,k=8; j>i-9;j--,k--)
                temp_arr[j]= temp_arr[j] ^ ref[k];
         
         return temp_arr;   
}

//ENCODE: mix the columns by multiplying with matrix 'refmatrix'

void pt_mix_coloumns()
{
          int c,i,sum=0,k,x,mul[4], total_cell[15], *temp_arr, p[15];
           
           for(i=0;i<4;i++)
           {
                  for(x=0; x<14; x++)
                    total_cell[i]=0;
                  
                  for (c = 0; c < 4; c++) 
                  {
                      for(x=0; x<14; x++)
                         p[i]=0;
                   
                      for (k = 0; k < 4; k++) 
                      {
                       
                        temp_arr= galois_mul(ct[k][i],refmatrix[c][k],p);
                                                
                        for(x=0; x<14; x++)
                             total_cell[x]=total_cell[x] ^ temp_arr[x];
                       
                      }
                     sum= bin_to_dec(total_cell); 
                     ct[c][i] = sum;
                      sum = 0;
                    
                  }
           }
}


//ENCODE: add round key to pt
void pt_addrkey()
{
        for(int i=0; i<4; i++)
            for(int j=0; j<4; j++)
                ct[i][j]= ct[i][j] ^ key[i][j];
        
}

//MAIN METHOD
int main()
{
           int a[100],p,i,j, msglen, blocks, round,count=0;
           char msg[512], finalct[512]; //key length= multiple of 16
         keyinp();
               
               
        printf("\n enter the plaintext to be encrypted (preferably maximum length of 512 characters): \n");
        scanf("%[^\n]%*c", msg); 
        msglen= strlen(msg);
       
        
        //padding of the message
        if(msglen % 16 !=0)
          {
            for(i=0; i<(16-(msglen%16)); i++)
               strcat(msg,"x");
          } 
        msglen= strlen(msg);
        
        blocks= msglen/16;
               
       //iteration through each block of pt and encoding individually
         for(int j=0; j<blocks; j++)
         {
                 
                  
                 //copying the message to pt matrix, block by block
                
                 int abc= j*16;
                 for(int i=0; i<4; i++)
                   for(int j=0; j<4; j++)
                       pt[i][j]= msg[abc++];
                       
                    
                  //ENCODING BEGINS
                  xor_pt();
                  
                  //round 1 to 9
                  for(round=1; round<=9; round++)
                    {
                               pt_substituition();
                               pt_shiftrows();
                               pt_mix_coloumns();
                               generate_key();
                               pt_addrkey();
                    }
                    
                   // last round
                        pt_substituition();
                        pt_shiftrows();
                        generate_key(); pt_addrkey();
                         for(int i=0;i<4;i++)
                              { 
                                      for(int j=0;j<4;j++)
                                         {
                                             char ch;
                                             if(ct[i][j]<33)
                                                ct[i][j]+=64;
                                             ch= ct[i][j];
                                             finalct[count]=ch;
                                             count++;
                                          }   
                               } 
         }
          printf("\n the cipher text generated by this AES implementation is: \n ");
          for(int i=0; i<count;i++)
               printf("%c",finalct[i]);
           printf("\n");
           return 0;
}